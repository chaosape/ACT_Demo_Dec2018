package SW
public
	
with Data_Model;
with Base_Types;
with TB_SYS;

-- This is the structure to hold the lat/long/alt values of a coordinate
data Coordinate
    
end Coordinate;

data implementation Coordinate.Impl
	subcomponents
		lat: data Base_Types::Integer_32;
		longitude: data Base_Types::Integer_32; -- jab 'long' is a c keyword
		alt: data Base_Types::Integer_32;
end Coordinate.Impl;
	
-- The Map is a structure that contains a list of coordinates that encircle a
-- region.  
-- In this implementation, we fix the size of the map to 4 waypoints
data Map
	  
end Map;
	
data implementation Map.Impl
	subcomponents
		wp1: data Coordinate.Impl;
		wp2: data Coordinate.Impl;
		wp3: data Coordinate.Impl;
		wp4: data Coordinate.Impl;
end Map.Impl;
	
-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
-- sensing region to conduct surveillance.
data FlightPattern
	--properties		
	--	Data_Model::Data_Representation => Enum;
	--	Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
end FlightPattern;
	
data implementation FlightPattern.Impl
	subcomponents
		enumAsInt: data Base_Types::Integer_32;
end FlightPattern.Impl;
	
-- The Command structure contains data that the Ground Station passes to the UAV.
-- It contains a Map, Flight Pattern and Authentication bit.
data Command	  
end Command;
		
data implementation Command.Impl
	subcomponents
		Map: data Map.Impl;
		Pattern: data FlightPattern.Impl;
		HMAC: data Base_Types::Boolean;
end Command.Impl;
	
-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
-- Map and Flight Pattern.
-- For this implementation, we fix the size of the Mission to 10 waypoints.
data Mission
end Mission;

data implementation Mission.Impl
	properties
    	Data_Model::Data_Representation => Array;
    	Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8));
    	Data_Model::Dimension => (6429);
end Mission.Impl;
		
-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from
-- the Mission.
-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
-- The crc value is an abstraction, which, if true, tells us that the data has not
-- been corrupted.
data MissionWindow	  
end MissionWindow;
		
data implementation MissionWindow.Impl
	subcomponents
		wp1: data Coordinate.Impl;
		wp2: data Coordinate.Impl;
		wp3: data Coordinate.Impl;
		wp4: data Coordinate.Impl;
		crc: data Base_Types::Boolean;
end MissionWindow.Impl;
	
thread RadioDriver
	features
		recv_map_out: out event data port Command.Impl;
		
	properties
		Source_Text => ("behavior/radiodriver.c");
   		Dispatch_Protocol => Sporadic;
      	Priority => 200;
      	Stack_Size => 1024 Bytes;
      	Compute_Execution_Time => 10 us .. 100 us;
      	Period => 1 ms;
      	TB_SYS::Sends_Events_To => "{{}}";
      	Initialize_Entrypoint_Source_Text => "radio_driver_component_init";
end RadioDriver;
	
thread implementation RadioDriver.Impl
end RadioDriver.Impl;

thread FlightPlanner
	features
		flight_plan: out data port Mission.Impl;
		recv_map: in event data port Command.Impl  {
			TB_SYS::Compute_Entrypoint_Source_Text => ("recv_map");
		};
		-- position_status: in event data port Coordinate.Impl;
    
	properties
		Source_Text => ("behavior/flightplanner.c");
    	Dispatch_Protocol => Sporadic;
      	Priority => 200;
      	Stack_Size => 1024 Bytes;
      	Compute_Execution_Time => 10 us .. 100 us;
      	Period => 1 ms;
      	TB_SYS::Sends_Events_To => "{{}}";		
end FlightPlanner;
  
thread implementation FlightPlanner.Impl
end FlightPlanner.Impl;
  	
thread WaypointManager
	features
		flight_plan: in data port Mission.Impl;
		waypoint: out event data port MissionWindow.Impl;
		position_status: in event data port Coordinate.Impl;
	properties
    	Dispatch_Protocol => Sporadic;
    	Priority => 200;
    	Stack_Size => 1024 Bytes;
    	Compute_Execution_Time => 10 us .. 100 us;
    	Period => 1 ms;
    	TB_SYS::Sends_Events_To => "{{}}";  
end WaypointManager;
	
thread implementation WaypointManager.Impl
end WaypointManager.Impl;
		
thread UARTDriver
	features
		position_status_out: out event data port Coordinate.Impl;
		waypoint_in: in event data port MissionWindow.Impl;
			
	properties
    	Dispatch_Protocol => Sporadic;
     	Priority => 200;
    	Stack_Size => 1024 Bytes;
    	Compute_Execution_Time => 10 us .. 100 us;
    	Period => 1 ms;
    	TB_SYS::Sends_Events_To => "{{}}";  			
end UARTDriver;	
	
thread implementation UARTDriver.Impl		
end UARTDriver.Impl;
	

	process MC_SW
		features
			recv_map: in event data port Command.Impl;
			send_status: out event data port Coordinate.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Coordinate.Impl;
	end MC_SW;


	process implementation MC_SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			FPLN: thread FlightPlanner.Impl;
			WPM: thread WaypointManager.Impl;
			UART: thread UARTDriver.Impl;
		connections
			c3: port RADIO.recv_map_out -> FPLN.recv_map;
			c5: port FPLN.flight_plan -> WPM.flight_plan;
			c6: port WPM.waypoint -> UART.waypoint_in;
			c7: port UART.position_status_out -> WPM.position_status;
			-- c8: port UART.position_status_out -> FPLN.position_status;
			
	end MC_SW.Impl;
	
	


	
end SW;